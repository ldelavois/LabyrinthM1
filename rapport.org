#+TITLE: Rapport : Projet Approche Objet 2017

#+AUTHOR: L. DELAVOIS, J. MASSONNEAU, A. MAHAZOASY, M. PAULMIER

#+STARTUP: entitiespretty

#+BEGIN_EXPORT latex
\clearpage
#+END_EXPORT

* Introduction

Le développement de notre projet s'est effectué au moyen du logiciel
de gestion de versions /[[https://git-scm.com/][git]]/ avec un dépot hébergé sur
[[https://github.com/ldelavois/LabyrinthM1][github]].

Ce projet consistait en la réalisation d'un jeu de plateau type
PacMan. Pour cela nous avons formé un groupe de 4 étudiants de M1
informatique. Nous avons utilisé la bibliothèque java [[http://jgrapht.org][jgrapht]] pour ce
qui est de l'implémentation de la structure de données qui accueillera
notre plateau de jeu. L'intérêt de ce projet réside principalement
dans la mise en oeuvre de patrons de conception et principe de
programmation objet vus en cours. La partie implémentation des
algorithmes n'est pas le sujet principal de ce projet.

** Contraintes

Pour ce projet, nous devions respecter quelques contraintes :

- le projet doit respecter l'architecture *MVC*
- être documenté par un dossier PDF de quelques pages (ce fichier),
- être documenté sous la forme d'un hypertexte produit par la /javadoc/,
- appliquer les /Design Patterns/ utils,
- appliquer les tests unitaires
* Répartition du travail

En début de projet, nous nous sommes répartit les tâches de la façon
suivante :

- implémentation de l'algorithme de Manhattan : Andy
- implémentation du graph et du labyrinthe : Matthias
- implémentation de la vue : Ludovic
- implémentation du joueur : Julien

Le problème avec cette répartition c'est que nous avions certaines
tâches qui dépendaient de la finition d'autres (par exemple, le
labyrinthe devait être fini pour l'algo de Manhattan). Au final nous
avons terminé tous ensemble les parties cruciales en TD avant de se
lancer dans nos tâches. Nous nous sommes rendu compte qu'il fallait
avoir un modèle solide pour pouvoir implémenter la vue. Le labyrinthe
n'a pu être affiché qu'après le troisième TD avec le retard que nous
avions pris sur l'implémentation du modèle.

Ensuite, la répartition du travail s'est effectuée de la manière suivante.

Julien s'est occupé de l'implémention des controllers (1 seul au début
qui à été séparé en plusieurs) et des personnages (=Player= et
=Ennemy=).

Ludovic (ajout des images png,création de la fenêtre,affichage du labyrinthe, ajout du candy) et
Matthias (affichage et mise à jour de la position des joueurs) ont
implémenté la vue.

Matthias a continué l'implémentation du modèle avec les classes
=Door=, =Item= et les classes abstraites et interfaces du modèle. Il
s'est également occupé de la rédaction du rapport ainsi que de la
javadoc (pour les fonctions, classes et attributs non documentées).

Andy s'est occupé de l'implémentation des tests unitaires des classes
Graph, Vertex et Edge.

* Organisation du projet

Pour la structure de notre projet, nous avons les diagrammes de
classes suivants :

#+CAPTION: Diagramme de classes du modèle
[[./ModelClassDiagram.png]]

#+CAPTION: Diagramme de classes du controlleur
[[./ControllerClassDiagram.png]]

#+CAPTION: Diagramme de classe de la vue
[[./ViewClassDiagram.png]]

#+BEGIN_EXPORT latex
\clearpage
#+END_EXPORT

Comme on peut le voir dans le dernier diagramme, nous avons choisi
d'incorporer tous les éléments de la vue dans une seule classe. Ce
n'est pas incorrect d'un point de vue conception MVC mais ce n'est
pas le modèle le plus flexible en terme d'évolution. L'idéal aurait
été de faire une vue pour chaque élément du modèle que l'on souhaite
afficher (un peu comme ce que l'on a fait pour le controlleur).

Pour générer ces diagrammes de classes, nous avons utilisé le plugin
eclipse ModelGoon UML4Java. Nous avons privilégié cet outil à d'autres
alternatives qui auraient peut être été plus efficaces (obligé de
générer le diagramme classe par classe avec celui ci) car c'est un des
rares qui soit sous licence libre.

* La structure de données

La particularité de ce projet était l'utilisation d'un graphe pour
représenter le labyrinthe. Cela permet, entre autres, d'appliquer
l'algorithme de Manhattan pour le déplacement des ennemis par
exemple. Notre graphe contient des sommets de la classe =Vertex= et des
arrêtes de la classe =Edge= qui sont des paires de sommets avec un
type de porte afin de savoir si une porte se trouve à cet endroit et
quel est son statut (ouvert, fermé, absent).

** La bibliothèque jgrapht

Pour l'implémentation du graphe, nous avons utilisé la bibliothèque
[[http://jgrapht.org/][Jgrapht]] qui nous donnait toutes les primitives nécessaires pour créer,
modifier et parcourir notre graphe.

* Fenêtre de jeu

Pour l'affichage de notre jeu, nous avons utilisé la bibliothèque JavaFX
qui s'occupe de l'affichage. Nous nous sommes appuyés sur l'ébauche de code du sujet (partie 5: Dessiner tout ça).
Le répertoire =view= de notre projet
permet de créer la fenêtre de jeu et placer les éléments (labyrinthe,
personnages, objets...) dans celle-ci. Comme vu plus tôt, toute la vue est
gérée par une seule classe, ce n'est pas un problème pour le respect
du modèle MVC, en revanche ce n'est pas une pratique courante ou
recommandée pour les projets que l'on veut modulaires. En effet,
chaque classe ne doit pas pas dépasser les 300 lignes.Au delà,
on considère qu'il est possible de diviser la classe. Une amélioration aurait été de créer les fichiers =ViewPlayer=, =ViewLabyrinthe=,=ViewItem=,=ViewEnnemy=...

* Javadoc

Nous avons documenté toutes nos classes, méthodes et variables
publiques avec l'outil /javadoc/. Cela nous permet de générer une
documentation structurée de notre projet en /html/. Un autre avantage
est la possibilité d'avoir la documentation directement dans
l'éditeur. *Eclipse*, *NetBeans* et *IntelliJ IDEA* prennent en charge
la /javadoc/ par défaut par exemple, mais certains modes pour l'éditeur
*Emacs* ou plugins *Vim* permettent de naviguer dans la javadoc
efficacement.

* TODO Tests unitaires

On va créer des tests unitaires pour le graphe seulement (classes
Graph, Vertex et Edge). On verra si on a le temps pour plus après mais
je ne suis pas sur que ce soit nécessaire.

* Déroulement d'une partie

Le joueur déplace son personnage avec les touches fléchées. Le but du
jeu est d'atteindre la porte sans être touché par un ennemi. Si un
ennemi est touché, la partie est perdu et la fenêtre de jeu est
fermée. Il y a aussi un bonbon sur le plateau de jeu que le joueur
peut aller chercher avant d'atteindre la porte. Dans notre
implémentation cela n'apporte rien de plus au joueur.

L'ennemi se déplace toutes les secondes sur le plateau en essayant de
rattraper le joueur afin de l'empêcher d'atteindre la porte.

* Amélioration à apporter au jeu

En soit, le jeu n'est pas très amusant. Il y a beaucoup de place pour
l'amélioration du jeu. Il faudrait, par exemple, pouvoir ajouter
plusieurs niveaux avec une augmentation en difficulté (accélération du
joueur, ajout d'ennemis, ajout de boutons, ajout de portes fermant
certains couloirs...).

Lorsque la partie se termine, la fenêtre est simplement fermée et un
message est affiché dans la console indiquant si l'on a perdu ou
gagné. Il serait plus agréable pour l'utilisateur d'avoir un message
d'erreur sur la fenêtre.

Ensuite, il n'y a qu'un seul bonbon par partie. On pourrait ajouter un
timer qui ferait afficher et disparaître les bonbons à intervalles
réguliers en utilisant des bonbons différents qui pourraient
éventuellement valoir plus ou moins de points.

Enfin on pourrait imaginer un système de comptage de points
(en ramassant les bonbons, effectuant le moins de déplacement...) à
afficher à la fin de la partie.

* Conclusion

Ce projet nous a permis d'appliquer les concepts vus en
cours. L'architecture du projet en *MVC* était l'une des principale
difficulté de ce projet. Nous avons tenté d'appliquer le plus
fidèlement possible les principe de cette d'architecture.

Nous avons rencontré plusieurs difficultés dans la réalisation de ce
projet. Premièrement, chacun d'entre nous était engagé dans des
projets différents sur lequel nous avons passé du temps. Nous avons
donc pris du retard au départ du projet. De plus, le chevauchement de
ce projet avec la période d'examens n'a pas rendu la terminaison du
projet très aisée.

Nous avons également rencontré un problème d'implémentation
algorithmique au milieu du développement. Nous avons du revoir
l'implémentation de certaines fonctions de notre structure de
données. Heureusement, le respect du paradigme /MVC/ nous a permis de
trouver la localisation du bug rapidement. Sa résolution a, quant à
elle, pris plus de temps.

L'organisation n'a pas été des plus simple. L'organisation d'un groupe
de 4 personnes est compliquée pour un projet comme celui-ci, de plus
nous n'étions pas un groupe déjà formé avant ce projet. Le projet
n'est pas terminé en tant que jeu mais la réalisation d'une
application relativement conséquente orientée objet et respectant le
modèle *MVC* était le but premier de celui-ci.
